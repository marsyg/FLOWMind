generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  passwordHash    String?
  ageRange        String
  occupation      String
  interests       String[]
  mbtiType        String
  mbtiPercentages Json?
  chronotype      Json?
  createdAt       DateTime       @default(now())
  gender          String
  analysisData    AnalysisData[]
  feedbacks       Feedback[]
  fixedTasks      FixedTask[]
  goals           Goal[]
  notifications   Notification[]
  routines        Routine[]
}

model Goal {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  goalType    String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model FixedTask {
  id           String        @id @default(uuid())
  userId       String
  title        String
  description  String
  duration     Int
  createdAt    DateTime      @default(now())
  repeat       Boolean
  routineId    String?
  feedbackId   String?       @unique
  feedback     Feedback?
  routine      Routine?      @relation(fields: [routineId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  notification Notification?
}

model Notification {
  id          String     @id @default(uuid())
  userId      String
  timeWindow  String?
  priority    String?
  createdAt   DateTime   @default(now())
  fixedTaskId String?    @unique
  routineId   String?    @unique
  FixedTask   FixedTask? @relation(fields: [fixedTaskId], references: [id])
  routine     Routine?   @relation(fields: [routineId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Routine {
  id           String        @id @default(uuid())
  userId       String
  date         DateTime
  tasks        Json
  status       String        @default("pending")
  message      String?
  feedbackId   String?
  createdAt    DateTime      @default(now())
  fixedTasks   FixedTask[]
  notification Notification?
  feedback     Feedback?     @relation(fields: [feedbackId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model Feedback {
  id             String     @id @default(uuid())
  userId         String
  routineId      String
  fixedTaskId    String?    @unique
  rating         Int
  comment        String?
  energyLevel    Int?
  taskCompletion Boolean?
  efficiency     Int?
  createdAt      DateTime   @default(now())
  fixedTask      FixedTask? @relation(fields: [fixedTaskId], references: [id])
  user           User       @relation(fields: [userId], references: [id])
  routine        Routine[]
}

model AnalysisData {
  id              String   @id @default(uuid())
  userId          String
  date            DateTime
  taskCompletion  Float?
  timeManagement  Float?
  goalProgress    Float?
  trends          Json?
  recommendations Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}
